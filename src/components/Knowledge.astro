---
import { sections } from "../utils/info.json";
---

<section id="knowledge">
  <h2 class="section-title">{sections?.knowledge?.text}</h2>

  <div class="filters">
    <button
      type="button"
      class="see-more-button"
      aria-label="See more knowledge"
    >
      Ver más
    </button>
    <button
      type="button"
      class="favorites-button"
      aria-label="See favorites knowledge"
    >
      Favoritos
    </button>
  </div>

  <techs-container class="card-container"></techs-container>
</section>

<style>
  section[id="knowledge"] {
    display: grid;
    gap: 1.5rem;
    width: 100%;

    & .card-container {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;

      & a {
        padding: 0.5rem 0.3rem;
      }
    }

    .filters {
      display: flex;
      justify-self: center;
      gap: 1rem;

      & button {
        transition: var(--transition-one-milisecond);
        background-color: transparent;
        border: none;
        outline: none;
        padding: 0.25rem 0.5rem;
        font-weight: 600;
        border: 0.1rem solid transparent;
        border-radius: var(--border-radius-min);
        font-size: 14px;
        color: currentColor;

        &:hover,
        &:active {
          border-color: var(--palette-black);

          :is(.dark) & {
            border-color: var(--palette-white);
          }
        }
      }
    }

    & .card-container {
      & .card {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        text-decoration: none;
        padding: 0.3rem;
        transition: var(--transition-one-milisecond);
        border: 0.1rem solid transparent;
        border-radius: var(--border-radius-min);

        &:hover {
          border-color: var(--palette-grey);
          text-shadow: 1px 1.5px 2px var(--palette-grey);
        }

        &:active {
          background-color: var(--palette-grey);
        }

        & .img-icon {
          height: 3rem;
          width: 3rem;
        }
      }
    }
  }
</style>

<script>
  import { technologies } from "../utils/info.json";
  import { $ } from "../utils/my_scripts";

  const seeMoreButton = $(".see-more-button");
  const favoritesButton = $(".favorites-button");
  const sortedData = technologies.sort((a, b) => a.name.localeCompare(b.name));
  const state = {
    seeFavorites: false,
    seeAll: false,
  };
  const slicedData = sortedData.slice(0, 24);

  let data = slicedData;

  // Custom element
  class TechsContainer extends HTMLElement {
    constructor() {
      super();
      this.render();
    }

    render() {
      const generateHtml = () => {
        this.textContent = "";

        data.forEach(({ website, name, icon_name }) => {
          const anchor = document.createElement("a");
          anchor.setAttribute("href", website);
          anchor.setAttribute("target", "_blank");
          anchor.setAttribute("rel", "noreferrer noopener");
          anchor.setAttribute("class", "card");
          anchor.setAttribute(
            "aria-label",
            `Sitio web de ${name.toLowerCase()}`
          );

          if (icon_name) {
            const img = document.createElement("img");
            img.setAttribute("src", `/icons/${icon_name}.svg`);
            img.setAttribute("class", "img-icon");
            img.setAttribute("alt", `imagen de ${name}`);

            anchor.appendChild(img);
          }

          const span = document.createElement("span");
          span.setAttribute("data-class", "card-title");
          span.textContent = name;

          const footerCard = document.createElement("footer");
          footerCard.appendChild(span);
          anchor.appendChild(footerCard);

          this.appendChild(anchor);
        });
      };

      // Proxy for detect change of "state" object
      const proxy = new Proxy(state, {
        set: (target, key, value) => {
          target[key] = value;
          data = state.seeAll ? sortedData : slicedData;
          data = state.seeFavorites ? data.filter((elm) => elm.fav) : data;
          generateHtml();

          return true;
        },
      });

      seeMoreButton.addEventListener("click", ({ target }) => {
        proxy.seeAll = !state.seeAll;
        target.textContent = state.seeAll ? "Ver menos" : "Ver más";
      });

      favoritesButton.addEventListener("click", ({ target }) => {
        proxy.seeFavorites = !state.seeFavorites;
        target.textContent = state.seeFavorites
          ? "Dejar de ver favoritos"
          : "Favoritos";
      });

      generateHtml();
    }
  }

  customElements.define("techs-container", TechsContainer);
  // End custom element
</script>
