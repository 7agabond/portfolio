---
import { Icon } from "astro-icon";
import { lookingForAJob, sections, socialMedia } from "../utils/info.json";
import Anchor from "./Anchor.astro";
---

<header>
  <div class="header-container">
    <section class="contact">
      <button id="darkModeButton" type="button" aria-label="Dark mode">
        <Icon name="sun" />
        <Icon name="moon" />
      </button>

      <article class="social-container">
        <div class="social">
          {
            socialMedia.map((elm) => {
              return (
                <Anchor
                  url={elm.link}
                  goToAnotherWeb={true}
                  aria-label={`Ver cuenta en ${elm.name}`}
                >
                  <Icon name={elm.icon} />
                </Anchor>
              );
            })
          }
        </div>

        {
          lookingForAJob && (
            <>
              &bull;
              <a
                href="/CV/CV_es.pdf"
                download="CV - Sebastian Cortes.pdf"
                aria-label="Descargar curriculum vitae"
                class="download-cv"
              >
                Descargar CV
              </a>
            </>
          )
        }
      </article>
    </section>

    <nav class="index-list">
      <ul>
        {
          Object.values(sections).map(({ href, text }) => (
            <li>
              <Anchor url={href}>{text}</Anchor>
            </li>
          ))
        }
      </ul>
    </nav>
  </div>
</header>

<style>
  header {
    display: flex;
    top: 0;
    z-index: 1;
    position: sticky;
    background-color: var(--palette-white);
    border-bottom: 0.1rem solid currentColor;
    transition: var(--transition-one-milisecond);
    justify-content: center;

    :is(.dark) & {
      background-color: var(--palette-black);
    }

    & .header-container {
      display: flex;
      column-gap: 3rem;
      row-gap: 0.75rem;
      justify-content: space-between;
      padding: 1rem 0rem;
      font-family: var(--font-family-text);
      flex-wrap: wrap;
    }

    .header-container.wrapped {
      justify-content: center;
    }
  }

  .contact {
    display: flex;
    align-items: center;
    gap: 1rem;

    & .social-container {
      display: flex;
      gap: 0.5rem;
      align-items: center;

      & .social {
        display: flex;
        gap: 0.3rem;

        & :global(a) {
          display: flex;

          & [astro-icon] {
            height: 2rem;
            width: 2rem;
            fill: var(--palette-white);
          }
        }
      }

      & .download-cv {
        transition: var(--transition-two-milisecond);
        border: 1px dashed currentColor;
        border-radius: var(--border-radius-min);
        padding: 0.3rem 0.5rem;
        text-decoration: none;

        &:hover {
          border: 1px solid currentColor;
          font-weight: bold;
          text-shadow: 0 0 1rem currentColor;
        }
      }
    }
  }

  .index-list {
    display: flex;
    align-items: center;

    & ul {
      list-style: none;
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
      padding: 0;

      & li > :global(a) {
        text-decoration: none;

        :is(&:hover, &:active) {
          text-decoration: underline;
        }
      }

      :is(.header-container.wrapped) & {
        justify-content: center;
      }
    }
  }

  #darkModeButton {
    display: flex;
    border: transparent;
    outline: none;
    background-color: transparent;
    padding: 0.3rem;
    border-radius: var(--border-radius-min);

    & [astro-icon] {
      height: 2rem;
      width: 2rem;
    }

    &:hover,
    &:active {
      outline: 0.15rem solid var(--palette-grey);
    }

    & [astro-icon="sun"] {
      display: none;
    }

    & [astro-icon="moon"] {
      color: var(--palette-black);
    }

    :is(.dark) & {
      & [astro-icon="sun"] {
        color: yellow;
        display: block;
      }

      & [astro-icon="moon"] {
        display: none;
      }
    }
  }
</style>

<script>
  import { $ } from "../utils/my_scripts";

  const $headerContainer = $(".header-container");
  let auxHeight = 0;

  // Adjusts the justify-content CSS prop of the header
  const adjustAligment = () => {
    const { height, width } = getComputedStyle($headerContainer);
    const heightComputed = Number(height.replace(/[A-z]/g, ""));
    const widthComputed = Number(width.replace(/[A-z]/g, ""));

    if (!auxHeight) auxHeight = heightComputed;
    if (auxHeight && auxHeight > heightComputed) auxHeight = heightComputed;

    if (auxHeight < heightComputed || widthComputed <= 680) {
      $headerContainer.classList.add("wrapped");
    } else {
      $headerContainer.classList.remove("wrapped");
    }
  };

  window.addEventListener("load", adjustAligment);
  window.addEventListener("resize", adjustAligment);

  // Dark mode
  document.getElementById("darkModeButton").addEventListener("click", () => {
    const element = document.documentElement;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  });
</script>
