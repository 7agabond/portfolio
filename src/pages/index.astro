---
import "@fontsource/space-grotesk";
import Layout from "../Layouts/Layout.astro";
---

<style is:global>
  body,
  body > main,
  body > header {
    transition: 0.15s all ease;
  }

  body {
    margin: 0;
    background-color: palette.white;
    padding-bottom: 5rem;

    & main,
    header {
      padding-left: 1rem;
      padding-right: 1rem;
    }

    & section[id],
    & header > [data-class="header-container"] {
      max-width: 75ch;
      justify-self: center;
    }

    & main {
      display: grid;
      gap: 6xl;
    }

    &
      :is(
        a,
        button,
        span,
        p,
        h4,
        h1,
        h2,
        [data-class="section-title"],
        small,
        header
      ) {
      color: palette.black;
    }
  }

  .dark {
    & body,
    & header {
      background-color: palette.black;
    }

    &
      :is(
        a,
        button,
        span,
        p,
        h4,
        h1,
        h2,
        [data-class="section-title"],
        small,
        header
      ) {
      color: palette.white;
    }
  }

  section[id] {
    word-break: break-word;

    & [data-class="section-title"] {
      font-weight: bold;
      font-size: 2xl;
      display: block;
      font-family: mono;
      margin: 0;
    }
  }

  button,
  a,
  [data-class="card-projects"],
  [data-class="see-more-button-knowledge"],
  [data-class="favorites-button-knowledge"],
  [data-class="card-knowledge"],
  #darkModeButton {
    border-radius: 0.25rem;
  }
</style>

<style is:inline>
  html {
    visibility: hidden;
  }

  * {
    font-family: "Space Grotesk", system-ui, -apple-system, BlinkMacSystemFont,
      "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans",
      "Helvetica Neue", sans-serif;
    scroll-behavior: smooth;
  }
</style>

<Layout />

<script>
  const header = document.querySelector("header");
  const sections = document.querySelectorAll("body > main > section[id]");
  const darkModeValue = localStorage.getItem("theme");
  const docElement = document.documentElement;

  ["resize", "click", "touchend", "load"].forEach((elm) => {
    window.addEventListener(elm, () => {
      // Control the "scroll-margin-top" style value when the header change their height
      console.log({ sections });
      sections.forEach((evt) => {
        console.log(getComputedStyle(evt));

        // elm.style.scrollMarginTop = getComputedStyle(header).height;
      });
    });
  });

  // Dark mode
  document.getElementById("darkModeButton").addEventListener("click", () => {
    const mode = docElement.className.includes("dark") ? "light" : "dark";

    docElement.setAttribute("class", mode);
    localStorage.setItem("theme", mode);
  });

  window.onload = () => {
    const theme = darkModeValue === "light" ? "light" : "dark";

    docElement.setAttribute("class", theme);
    localStorage.setItem("theme", theme);

    document.styleSheets[0].deleteRule(0); // remove "visibility" prop style to "visible"
  };
</script>
