---
import { sections } from "../utils/info.json";
---

<section id="knowledge">
  <h1 data-class="section-title">{sections?.knowledge?.text}</h1>

  <div data-class="filters-knowledge">
    <button
      type="button"
      data-class="see-more-button-knowledge"
      aria-label="See more knowledge"
    >
      Ver más
    </button>
    <button
      type="button"
      data-class="favorites-button-knowledge"
      aria-label="See favorites knowledge"
    >
      Favoritos
    </button>
  </div>

  <techs-container data-class="card-container-knowledge"></techs-container>
</section>

<style>
  [data-class="title"] {
    color: palette.black;
    font-weight: bold;
    font-size: 2xl;
    display: block;
    font-family: mono;
  }
  section[id="knowledge"] {
    display: grid;
    gap: 1.5rem;
    width: 100%;
  }

  [data-class="card-container-knowledge"] {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;

    & a {
      padding: 0.5rem 0.3rem;
    }
  }

  [data-class="filters-knowledge"] {
    display: flex;
    justify-self: center;
    gap: 1rem;

    & button {
      transition: 0.1s all ease;
      background-color: transparent;
      border: none;
      outline: none;
      padding: 0.25rem 0.5rem;
      font-weight: semibold;
      border: 0.1rem solid transparent;

      &:hover,
      &:active {
        border-color: palette.black;
      }

      @nest :global(.dark) & {
        &:hover, &:active {
          border-color: palette.white;
        }
      }
    }
  }

  :global([data-class="img-icon-knowledge"]) {
    height: 3rem;
    width: 3rem;
  }

  :global([data-class="card-knowledge"]) {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    text-decoration: none;
    padding: 0.3rem;
    transition: 0.1s all ease;
    border: 0.1rem solid transparent;

    &:hover {
      border-color: palette.grey;
      text-shadow: 1px 1.5px 2px var(--color-palette-grey);
    }

    &:active {
      background-color: palette.grey;
    }
  }

  [data-class="card-title-knowledge"] {
    word-break: break-word;
  }
</style>

<script>
  import { technologies } from "../utils/info.json";
  import { $ } from "../utils/myScripts";

  const seeMoreButton = $("[data-class='see-more-button-knowledge']"),
    favoritesButton = $("[data-class='favorites-button-knowledge']"),
    techs = technologies.sort((a, b) => a.name.localeCompare(b.name));

  let data = techs.slice(0, 19),
    state = {
      seeFavorites: false,
      seeAll: false,
    };

  // Custom element
  class TechsContainer extends HTMLElement {
    constructor() {
      super();
      this.render();
    }

    render() {
      // Proxy for detect change of "state" object
      const myProxy = new Proxy(state, {
        set: (target, key, value) => {
          target[key] = value;
          data = state.seeAll ? techs : techs.slice(0, 19);
          data = state.seeFavorites ? data.filter((elm) => elm.fav) : data;
          MyRender();

          return true;
        },
      });

      const MyRender = () => {
        this.textContent = "";

        data.forEach((elm, index) => {
          const anchor = document.createElement("a");
          anchor.setAttribute("href", elm.website);
          anchor.setAttribute("target", "_blank");
          anchor.setAttribute("rel", "noreferrer noopener");
          anchor.setAttribute("key", `${index}`);
          anchor.setAttribute("data-class", "card-knowledge");
          anchor.setAttribute("aria-label", `Sitio web de ${elm.name}`);

          if (elm.icon_name) {
            const img = document.createElement("img");
            img.setAttribute("src", `/icons/${elm.icon_name}.svg`);
            img.setAttribute("data-class", "img-icon-knowledge");
            img.setAttribute("alt", `imagen de ${elm.name}`);

            anchor.appendChild(img);
          }

          const span = document.createElement("span");
          span.setAttribute("data-class", "card-title-knowledge");
          span.textContent = elm.name;
          anchor.appendChild(span);

          this.appendChild(anchor);
        });
      };

      seeMoreButton.addEventListener("click", (evt) => {
        myProxy.seeAll = !state.seeAll;
        evt.target.textContent = state.seeAll ? "Ver menos" : "Ver más";
      });

      favoritesButton.addEventListener("click", (evt) => {
        myProxy.seeFavorites = !state.seeFavorites;
        evt.target.textContent = state.seeFavorites
          ? "Dejar de ver favoritos"
          : "Favoritos";
      });

      MyRender();
    }
  }

  customElements.define("techs-container", TechsContainer);
  // End custom element
</script>
