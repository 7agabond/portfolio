---
import "@fontsource/space-grotesk";
import About from "../components/About.astro";
import Header from "../components/Header.astro";
import Home from "../components/Home.astro";
import Knowledge from "../components/Knowledge.astro";
import Projects from "../components/Projects.astro";
---

<style is:global>
  * {
    font-family: "Space Grotesk", system-ui, -apple-system, BlinkMacSystemFont,
      "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans",
      "Helvetica Neue", sans-serif;
    scroll-behavior: smooth;
  }

  html {
    visibility: hidden;
  }

  body,
  body > header,
  body > main {
    transition: 0.15s all ease;
  }

  body {
    margin: 0;
    background-color: palette.white;
    padding-bottom: 5rem;

    & main,
    & header {
      padding-left: 0.5rem;
      padding-right: 0.5rem;
    }

    & main {
      display: grid;
      gap: 6xl;

      & section[id] {
        scroll-margin-top: 10vh;
      }
    }

    & a,
    & button,
    & span,
    & p,
    & h4,
    & h1,
    & h2,
    & section[id]::before,
    & small {
      color: palette.black;
    }

    & header {
      background-color: palette.white;
    }

    @media (sm) {
      & header,
      & main {
        padding-left: 5rem;
        padding-right: 5rem;
      }
    }

    @media (md) {
      & header,
      & main {
        padding-left: 10rem;
        padding-right: 10rem;
      }
    }

    @media (lg) {
      & header,
      & main {
        padding-left: 15rem;
        padding-right: 15rem;
      }
    }

    @media (xl) {
      & header,
      & main {
        padding-left: 20rem;
        padding-right: 20rem;
      }
    }
  }

  .dark {
    & body,
    & header {
      background-color: palette.black;
    }

    & a,
    & button,
    & span,
    & p,
    & h4,
    & h1,
    & h2,
    & section[id]::before,
    & small,
    & header {
      color: palette.white;
    }
  }

  section[id] {
    word-break: break-word;

    &::before {
      font-weight: bold;
      font-size: 2xl;
      display: block;
      font-family: mono;
    }
  }

  button,
  a,
  [data-class="card-projects"],
  [data-class="see-more-button-knowledge"],
  [data-class="favorites-button-knowledge"],
  [data-class="card-knowledge"],
  #darkModeButton {
    border-radius: 0.25rem;
  }
</style>

<html lang="es">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Portafolio &bull; Sebastian Cortes</title>
  </head>

  <body>
    <Header />

    <main>
      <Home />
      <About />
      <Knowledge />
      <Projects />
    </main>
  </body>
</html>

<script>
  const HEADER = document.querySelector("header");
  const SECTIONS = document.querySelectorAll("body > main > section[id]");
  const CONTENT_READY = document.readyState === "interactive";
  const valueName = "theme";
  const darkModeValue = localStorage.getItem(valueName);
  const ELM = document.documentElement;

  const scrollMarginTopCalculation = () => {
    // function for control the "scroll-margin-top" style value when the header change their height
    Object.values(SECTIONS).forEach((elm) => {
      elm.style.scrollMarginTop =
        parseInt(window.getComputedStyle(HEADER).height) + 20 + "px";
    });
  };

  ["resize", "click", "touchend", "load"].forEach((elm) => {
    window.addEventListener(elm, scrollMarginTopCalculation);
  });

  // Dark mode
  const theme = () => {
    if (darkModeValue === "dark") {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.removeAttribute("class");
    }

    if (!darkModeValue) {
      localStorage.setItem(valueName, "light");
    }
  };

  const toggleTheme = () => {
    ELM.classList.toggle("dark");

    const isDark = ELM.className.includes("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  };

  document
    .getElementById("darkModeButton")
    .addEventListener("click", toggleTheme);

  if (CONTENT_READY) {
    theme();
    document.getElementsByTagName("html")[0].style.visibility = "visible"; // change "visibility" prop style to "visible"
  }
</script>
